{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw ← h,\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\nrw add_zero,\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\n  rw add_zero,\n  refl,\n  rw add_succ 0 n,\n  rw hn,\n  refl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc,\n  rw add_zero b,\n  rw add_zero,\n  refl,\n  rw add_succ b,\n  rw add_succ a,\n  rw add_succ (a + b),\n  rw hc,\n  refl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\n  rw add_zero (succ a),\n  rw add_zero a,\n  refl,\n  rw add_succ (succ a),\n  rw hb,\n  rw add_succ a,\n  refl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\n  rw add_zero,\n  rw zero_add,\n  refl,\n  rw succ_add,\n  rw add_succ,\n  rw hb,\n  refl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw add_succ,\nrw add_zero,\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_assoc,\nrw add_comm b c,\nrw ← add_assoc,\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with m hm,\n  rw mul_zero,\n  refl,\n  rw mul_succ,\n  rw hm,\n  rw add_zero,\n  refl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw mul_succ,\nrw mul_zero,\nrw zero_add,\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with m hm,\n  rw mul_zero,\n  refl,\n  rw mul_succ,\n  rw hm,\n  rw succ_eq_add_one m,\n  refl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\n  rw add_zero,\n  rw mul_zero,\n  rw add_zero,\n  refl,\n  rw add_succ,\n  rw mul_succ t (a + b),\n  rw hb,\n  rw mul_succ,\n  rw ← add_assoc,\n  refl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc,\n  rw mul_zero (a * b),\n  rw mul_zero b,\n  rw mul_zero a,\n  refl,\n  rw mul_succ (a * b),\n  rw hc,\n  rw mul_succ b,\n  rw mul_add,\n  refl,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\r\n  rw mul_zero,\r\n  rw mul_zero a,\r\n  rw add_zero,\r\n  refl,\r\n  rw mul_succ (succ a),\r\n  rw hb,\r\n  rw add_succ (a * b + b),\r\n  rw mul_succ a,\r\n  rw add_succ (a * b + a),\r\n  simp,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction a with a ha,\r\n  rw zero_add,\r\n  rw zero_mul,\r\n  rw zero_add,\r\n  refl,\r\n  rw succ_add,\r\n  rw succ_mul,\r\n  rw ha,\r\n  rw succ_mul,\r\n  simp,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\r\n  rw mul_zero,\r\n  rw zero_mul,\r\n  refl,\r\n  rw mul_succ,\r\n  rw hb,\r\n  rw succ_mul,\r\n  refl,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rw ← mul_assoc a b c,\r\nrw mul_comm a b,\r\nrw mul_assoc b a c,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rwa pow_zero,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\r\nrwa mul_zero,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrwa one_mul,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with m hm,\r\n  rwa pow_zero,\r\n  rw pow_succ,\r\n  rw hm,\r\n  rwa mul_one,"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\n  rw add_zero,\r\n  rw pow_zero, \r\n  rwa mul_one,\r\n  rw add_succ,\r\n  rw pow_succ,\r\n  rw hn,\r\n  rw pow_succ,\r\n  simp,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\n  repeat {rw pow_zero},\r\n  rwa mul_one,\r\n  repeat {rw pow_succ},\r\n  rw hn,\r\n  simp,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\n  rw pow_zero,\r\n  rw mul_zero,\r\n  rwa pow_zero,\r\n  rw pow_succ,\r\n  rw hn,\r\n  rw mul_succ,\r\n  rwa ← pow_add,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw one_eq_succ_zero,\r\nrepeat {rw pow_succ},\r\nrepeat {rw pow_zero},\r\nrepeat {rw one_mul},\r\nrepeat {rw succ_mul},\r\nrw zero_mul,\r\nrw zero_add,\r\nrepeat {rw add_mul},\r\nrepeat {rw mul_add},\r\nsimp,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 3*n+2,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros hp hq,\r\nexact hp,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros hpqr hpq hp,\r\napply (hpqr hp),\r\nhave hq : Q := hpq hp,\r\nexact hq,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqf hp,\r\napply hqf,\r\nhave hq : Q := hpq hp,\r\nexact hq,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqe hp,\r\napply hqe,\r\nhave hq : Q := hpq hp,\r\nexact hq,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro ha,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact ha,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro hp,\r\nexact hp,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro hp,\r\nintro hq,\r\nexact hp,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros hpqr hpq hp,\r\nhave hq : Q := hpq hp,\r\nhave hr : R := hpqr hp hq,\r\nexact hr,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr hp,\r\nhave hq : Q := hpq hp,\r\nhave hr : R := hqr hq,\r\nexact hr,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},\r\nintros hpq hqf hp,\r\nhave hq : Q := hpq hp,\r\napply hqf,\r\nexact hq,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro ha,\r\nhave hb : B := f1 ha,\r\nhave he : E := f2 hb,\r\nhave hf : F := f5 he,\r\nhave hg : G := f8 hf,\r\nhave hj : J := f9 hg,\r\nhave hi : I := f11 hj,\r\nhave hl : L := f15 hi,\r\nexact hl,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  exact p,\r\n  exact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\ncases hpq with hp hq,\r\nsplit,\r\n  exact hq,\r\n  exact hp,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\nsplit,\r\n  cases hpq with hp hq,\r\n  exact hp,\r\n  cases hqr with hq hr,\r\n  exact hr,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with hpq hqp,\r\nintro f,\r\ncases f with fqr frq,\r\nsplit,\r\n  intro hp,\r\n  apply fqr,\r\n  apply hpq,\r\n  exact hp,\r\n  intro hr,\r\n  apply hqp,\r\n  apply frq,\r\n  exact hr,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro hqr,\r\nsplit,\r\n  intro hp,\r\n  apply hqr.1,\r\n  apply hpq.1,\r\n  exact hp,\r\n  intro hr,\r\n  apply hpq.2,\r\n  apply hqr.2,\r\n  exact hr,"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro hq,\r\nright,\r\nexact hq,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro hor,\r\ncases hor with hp hq,\r\n  right,\r\n  exact hp,\r\n  left,\r\n  exact hq,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  intro hpor,\r\n  cases hpor with hp hor,\r\n  cases hor with hq hr,\r\n    left,\r\n    split,\r\n      exact hp,\r\n      exact hq,\r\n    right,\r\n    split,\r\n      exact hp,\r\n      exact hr,\r\n  intro for,\r\n  split,\r\n    cases for with hpq hpr,\r\n      exact hpq.1,\r\n      exact hpr.1,\r\n    cases for with hpq' hpr',\r\n      left,\r\n      exact hpq'.2,\r\n      right,\r\n      exact hpr'.2,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with hp hpf,\r\nrw not_iff_imp_false at hpf,\r\nexfalso,\r\napply hpf,\r\nexact hp,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q : Q,\r\nrepeat {cc},"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": " apply succ_inj,\r\n exact hs,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\napply succ_inj,\r\nexact h,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro ab,\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  exact succ_inj,\r\n  exact succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with t ht,\r\n  repeat{rw add_zero at h},\r\n  exact h,\r\n  repeat{rw add_succ at h},\r\n  rw succ_eq_succ_iff (a + t) (b + t) at h,\r\n  apply ht,\r\n  exact h,"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm t b,\r\nrw add_comm t a,\r\nexact add_right_cancel a t b,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  exact add_right_cancel a t b,\r\n  intro ab,\r\n  rw ab,\r\n  refl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw ← zero_add a at h,\r\nrw add_assoc 0 a b at h,\r\nrw add_comm a b at h,\r\nrw ← add_assoc 0 b a at h,\r\nrw add_right_cancel_iff (a) (0+b) (0) at h,\r\nrw zero_add at h,\r\nexact h,"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with b',\r\n  refl,\r\n  rw add_succ at H,\r\n  exfalso,\r\n  apply succ_ne_zero (a+b'),\r\n  exact H,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro hab,\r\nhave hb := add_left_eq_zero hab,\r\nrw hb at hab,\r\nrw add_zero at hab,\r\nexact hab,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact succ_eq_add_one d,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw succ_eq_add_one n at h,\r\nrw ← zero_add n at h,\r\nrw add_assoc 0 n 1 at h,\r\nrw add_comm n 1 at h,\r\nrw ← add_assoc 0 1 n at h,\r\nrw add_one_eq_succ 0 at h,\r\nrw add_right_cancel_iff n 0 (succ 0) at h,\r\nsymmetry at h,\r\napply succ_ne_zero 0,\r\nexact h,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intros ha0 hb0 hab,\r\ncases a with a,\r\n  apply ha0,\r\n  refl,\r\n  cases b with b,\r\n    apply hb0,\r\n    refl,\r\n    rw succ_mul at hab,\r\n    rw add_succ at hab,\r\n    exact succ_ne_zero _ hab,"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases a with a,\r\n  left,\r\n  refl,\r\n  cases b with b,\r\n    right,\r\n    refl,\r\n    right,\r\n    exfalso,\r\n    rw succ_mul at h,\r\n    rw add_succ at h,\r\n    exact succ_ne_zero _ h,"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  intro hab,\r\n  apply eq_zero_or_eq_zero_of_mul_eq_zero,\r\n  exact hab,\r\n  intro hor,\r\n  cases hor with ha hb,\r\n    rw ha,\r\n    rwa zero_mul,\r\n    rw hb,\r\n    rwa mul_zero,"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc generalizing b,\n  rw mul_zero,\n  intro hab,\n  rw mul_eq_zero_iff at hab,\n  cases hab with ha0 hb0,\n  exfalso,\n  apply ha,\n  exact ha0,\n  exact hb0,\n  intro hab',\n  cases b with b,\n    rw mul_zero at hab',\n    symmetry at hab',\n    rw mul_eq_zero_iff a (succ c) at hab',\n    cases hab' with ha0 hc0,\n      exfalso,\n      apply ha,\n      exact ha0,\n      symmetry at hc0,\n      exact hc0,\n    have hb := hc b,\n    rw ← add_right_cancel_iff a (a * b) (a * c) at hb,\n    repeat {rw mul_succ at hab'},\n    have hbc := hb hab',\n    rw ← succ_eq_succ_iff at hbc,\n    exact hbc,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "--rw le_iff_exists_add,\r\nuse 1,\r\nexact add_comm 1 x,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,\r\nrefl,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with x hx,\r\nrw hx,\r\nuse succ x,\r\nrefl,"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "use a,\r\nrw zero_add a,\r\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with x hx,\r\ncases hbc with y hy,\r\nrw hx at hy,\r\nuse x + y,\r\nrw ← add_assoc a x y,\r\nexact hy,"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with x hx,\r\ncases hba with y hy,\r\nrw hy at hx,\r\nrw add_assoc b y x at hx,\r\nsymmetry at hx,\r\nhave hxy := eq_zero_of_add_right_eq_self hx,\r\nhave hy0 := add_right_eq_zero hxy,\r\nrw hy,\r\nrw hy0,\r\nrefl,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with z hz,\r\nsymmetry at hz,\r\nhave ha := add_right_eq_zero hz,\r\nexact ha,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with x hx,\r\nuse x,\r\nrw succ_add,\r\nrw succ_eq_succ_iff,\r\nexact hx,"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb generalizing a,\r\n  right,\r\n  exact zero_le a,\r\n  cases a,\r\n    left,\r\n    exact zero_le (succ b),\r\n    have hor := hb a,\r\n    cases hor with hab hba,\r\n      left,\r\n      apply succ_le_succ,\r\n      exact hab,\r\n      right,\r\n      apply succ_le_succ,\r\n      exact hba,"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "use 1,\r\nrefl,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intro hab,\r\ncases hab with x hx,\r\nintro t,\r\nuse x,\r\nsimp,\r\nrw ← add_assoc a x t,\r\nrw add_right_cancel_iff t b (a+x),\r\nexact hx,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro hss,\r\ncases hss with x hx,\r\nrw succ_add at hx,\r\nrw succ_eq_succ_iff b (a + x) at hx,\r\nuse x,\r\nexact hx,"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro ha,\r\ncases ha with x hx,\r\nrw ← add_right_cancel_iff 1 a ((succ a) + x) at hx,\r\nrw add_one_eq_succ a at hx,\r\nrw add_assoc (succ a) x 1 at hx,\r\nrw add_one_eq_succ x at hx,\r\nsymmetry at hx,\r\nhave hsx := eq_zero_of_add_right_eq_self hx,\r\napply succ_ne_zero x,\r\nexact hsx,"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "have h := add_le_add_right h,\r\nhave ht := h t,\r\nrw add_comm a t at ht,\r\nrw add_comm b t at ht,\r\nexact ht,"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h.1 with x hx,\r\ncases x,\r\n  exfalso,\r\n  apply h.2,\r\n  use 0,\r\n  simp,\r\n  simp at hx,\r\n  rwa hx,\r\n  use x,\r\n  rw succ_add,\r\n  rw add_succ at hx,\r\n  exact hx,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nsplit,\r\n  have hls := le_succ (succ a) b h,\r\n  apply le_of_succ_le_succ,\r\n  exact hls,\r\n  intro hba,\r\n  have ht := le_trans (succ a) b a,\r\n  have hsa := ht h hba,\r\n  exact not_succ_le_self a hsa,\r\n\r\n  \r\n    \r\n"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  exact lt_aux_one a b,\r\n  exact lt_aux_two a b,"
    }
  ]
}